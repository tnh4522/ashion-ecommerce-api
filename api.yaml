openapi: 3.0.3
info:
  title: Document API
  description: API documentation for the Django e-commerce system.
  version: 1.0.0
servers:
  - url: 'http://localhost:8000'
paths:
  /register:
    post:
      summary: Register a new user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserRegistration'
      responses:
        '201':
          description: User registered successfully
        '400':
          description: Bad request
  /login:
    post:
      summary: Log in to obtain a JWT token
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Login'
      responses:
        '200':
          description: Successful login
          content:
            application/json:
              schema:
                type: object
                properties:
                  refresh:
                    type: string
                  access:
                    type: string
                  role:
                    type: string
                  username:
                    type: string
                  email:
                    type: string
        '401':
          description: Unauthorized
  /token/refresh:
    post:
      summary: Refresh JWT token
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TokenRefresh'
      responses:
        '200':
          description: Token refreshed successfully
  /me:
    get:
      summary: Get current user's details
      responses:
        '200':
          description: User details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
      security:
        - bearerAuth: []
    put:
      summary: Update current user's details
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserUpdate'
      responses:
        '200':
          description: User updated successfully
  /user/{user_id}:
    get:
      summary: Get a user's details by ID
      parameters:
        - name: user_id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: User details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '404':
          description: User not found
  /users/{user_id}/role:
    get:
      summary: Get a user's role
      parameters:
        - name: user_id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: User role
          content:
            application/json:
              schema:
                type: object
                properties:
                  role:
                    type: string
        '404':
          description: User not found
    put:
      summary: Update a user's role
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                role:
                  type: string
                  enum: [ADMIN, MANAGER, STAFF, SELLER, BUYER]
      responses:
        '200':
          description: Role updated successfully
        '403':
          description: Only administrators can update roles
  /users:
    get:
      summary: Get a list of all users
      parameters:
        - name: role
          in: query
          schema:
            type: string
            enum: [ADMIN, MANAGER, STAFF, SELLER, BUYER]
        - name: gender
          in: query
          schema:
            type: string
            enum: [MALE, FEMALE, OTHER]
      responses:
        '200':
          description: A list of users
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
      security:
        - bearerAuth: []
  /categories:
    get:
      summary: Get a list of all categories
      responses:
        '200':
          description: A list of categories
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Category'
  /categories/create:
    post:
      summary: Create a new category
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CategoryCreate'
      responses:
        '201':
          description: Category created successfully
  /products:
    get:
      summary: Get a list of all products
      responses:
        '200':
          description: A list of products
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Product'
  /products/create:
    post:
      summary: Create a new product
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProductCreate'
      responses:
        '201':
          description: Product created successfully
      security:
        - bearerAuth: []
components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    UserRegistration:
      type: object
      properties:
        username:
          type: string
        email:
          type: string
        password:
          type: string
        password2:
          type: string
        role:
          type: string
          enum: [ADMIN, MANAGER, STAFF, SELLER, BUYER]
    Login:
      type: object
      properties:
        username:
          type: string
        password:
          type: string
    TokenRefresh:
      type: object
      properties:
        refresh:
          type: string
    User:
      type: object
      properties:
        id:
          type: integer
        username:
          type: string
        email:
          type: string
        role:
          type: string
    UserUpdate:
      type: object
      properties:
        email:
          type: string
        phone_number:
          type: string
    Category:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
    CategoryCreate:
      type: object
      properties:
        name:
          type: string
        description:
          type: string
    Product:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
        sku:
          type: string
        price:
          type: number
          format: float
    ProductCreate:
      type: object
      properties:
        name:
          type: string
        price:
          type: number
          format: float
        category:
          type: integer
          description: ID of the category